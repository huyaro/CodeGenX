package dev.huyaro.gen.util

import com.intellij.database.psi.DbTable
import com.intellij.database.util.DasUtil
import com.intellij.openapi.module.Module
import com.intellij.openapi.roots.ModuleRootManager
import com.intellij.util.io.isDirectory
import dev.huyaro.gen.meta.Column
import dev.huyaro.gen.meta.Table
import dev.huyaro.gen.model.FilterRule
import dev.huyaro.gen.model.GeneratorOptions
import dev.huyaro.gen.model.Language
import dev.huyaro.gen.model.TypeRegistration
import org.jetbrains.jps.model.java.JavaSourceRootType
import java.nio.file.Files
import java.nio.file.Paths

/**
 * @author yanghu
 * @date 2022-11-21
 * @description Function details...
 */

/**
 * build generator options
 */
fun buildOptions(module: Module): GeneratorOptions {
    val username = System.getProperty("user.name")
    val sourceRoots = ModuleRootManager.getInstance(module).getSourceRoots(JavaSourceRootType.SOURCE)

    // guess root package
    val sourceRootDir = Paths.get(sourceRoots[0].path)
    val pkgRootDir = Files.walk(sourceRootDir, 5).filter { it.isDirectory() && Files.list(it).count() > 1 }
        .min { p1, p2 -> p1.toString().length - p2.toString().length }.get()
    val pkgRoot = sourceRootDir.relativize(pkgRootDir).joinToString(separator = ".")

    return GeneratorOptions(
        activeModule = module, author = username, rootPackage = pkgRoot, outputDir = sourceRoots[0].path
    )
}


/**
 * build full data for table metadata
 */
fun buildTable(
    typeService: TypeRegistration,
    dbTable: DbTable,
    columnFilter: FilterRule,
    lang: Language
): Table {
    val indices = DasUtil.getIndices(dbTable)
    val table = Table(name = dbTable.name, comment = dbTable.comment)

    val excludeCols = trimAndSplit(columnFilter.exclude)
    // filter columns and build table data
    var columns = DasUtil.getColumns(dbTable).toList()
    if (excludeCols.isNotEmpty()) {
        val compare: (String, String) -> Boolean = { s1: String, s2: String ->
            if (columnFilter.useRegex) Regex(s1).matches(s2) else s1.equals(s2, true)
        }
        excludeCols.forEach {
            columns = columns.filter { col -> !compare(it, col.name) }.toList()
        }
    }

    columns.forEach {
        val colName = it.name
        // There may be more than one identified type. e.g. tinyint unsigned
        val colType = it.dataType.typeName.let { name -> name.split(" ")[0] }
        val isPrimaryKey = DasUtil.isPrimary(it)
        val jvmType = typeService.getJvmType(colType)
        val jvmTypeName = if (lang == Language.KOTLIN) jvmType.simpleName else {
            if (isPrimaryKey) jvmType.javaPrimitiveType?.simpleName
            else jvmType.javaObjectType.simpleName
        }!!
        val column = Column(
            name = colName,
            typeName = colType,
            jvmType = jvmType,
            jvmTypeName = jvmTypeName,
            primaryKey = isPrimaryKey,
            autoGenerated = DasUtil.isAutoGenerated(it),
            length = it.dataType.length,
            scale = it.dataType.scale,
            nullable = !it.isNotNull,
            defaultValue = it.default,
            comment = it.comment,
            uniqKey = indices.filter { idx ->
                !isPrimaryKey && idx.isUnique && DasUtil.containsName(colName, idx.columnsRef)
            }.size() > 0
        )
        when {
            column.primaryKey -> table.keyColumns.add(column.name)
            column.uniqKey -> table.refColumns.add(column.name)
        }
        table.columns.add(column)
    }
    return table
}